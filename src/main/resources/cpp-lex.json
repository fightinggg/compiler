{
  "productionsTable": {
    "simpleNumber": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "lowerCaseLetters": [
      "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w",
      "x", "y", "z"
    ],
    "upperCaseLetters": [
      "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W",
      "X", "Y", "Z"
    ],
    "specialCharacters": [
      "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "-", "=",
      "{", "}", "|", "[", "]", "\\",
      ":", "\"", ";", "'",
      "<", ">", "?", ",", ".", "/",
      " "
    ],
    "letters": [
      "lowerCaseLetters",
      "upperCaseLetters"
    ],
    "lettersOrNumber": [
      "letters",
      "simpleNumber"
    ],
    "lettersOrNumberOrUnderline": [
      "letters",
      "simpleNumber",
      "_"
    ],
    "someLettersOrNumberOrUnderline": [
      "",
      "lettersOrNumberOrUnderline someLettersOrNumberOrUnderline"
    ],
    "nonZeroSimpleNumber": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "zeroLeadNumber": ["simpleNumber", "simpleNumber zeroLeadNumber"],
    "number": ["simpleNumber", "nonZeroSimpleNumber zeroLeadNumber"],
    "escapeChar": ["\\"],
    "doubleQuotes": ["\""],
    "angleLeftBracket": ["<"],
    "angleRightBracket": [">"],
    "specialCharactersEscape": [
      "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "-", "=",
      "{", "}", "|", "[", "]", "escapeChar escapeChar",
      ":", "escapeChar doubleQuotes", ";", "'",
      "<", ">", "?", ",", ".", "/",
      " "
    ],
    "space": [" "],
    "someSpace": [
      "",
      "space someSpace"
    ],
    "tab": ["\t"],
    "newLine": ["\n"],
    "blank": [
      "space",
      "tab",
      "newLine"
    ],
    "someBlank": [
      "",
      "blank someBlank"
    ],
    "characters": [
      "simpleNumber",
      "letters",
      "specialCharacters"
    ],
    "charactersEscape": [
      "simpleNumber",
      "letters",
      "specialCharactersEscape"
    ],
    "someCharactersEscape": [
      "",
      "charactersEscape someCharactersEscape"
    ],
    "doubleQuotesString": ["doubleQuotes someCharactersEscape doubleQuotes"],
    "string": ["doubleQuotesString"],
    "include": ["raw:#include"],
    "stdLib": ["angleLeftBracket someSpace string someSpace angleRightBracket"],
    "var": [
      "_ someLettersOrNumberOrUnderline",
      "letters someLettersOrNumberOrUnderline"
    ],
    "varType": [
      "var"
    ],
    "leftVar": [
      "var"
    ],
    "someVarJoinByCommaNotEmpty": [
      "var",
      "someVarJoinByCommaNotEmpty someBlank , someBlank var"
    ],
    "someVarJoinByComma": [
      "",
      "someVarJoinByCommaNotEmpty"
    ],
    "functionInvoke": [
      "var someBlank ( someBlank someVarJoinByComma someBlank )"
    ],
    "rightVarUnit": [
      "var",
      "number",
      "functionInvoke"
    ],
    "addOrSubExpression": [
      "rightVar someBlank + someBlank rightVarUnit",
      "rightVar someBlank - someBlank rightVarUnit"
    ],
    "mulOrDelExpression": [
      "rightVarUnit someBlank * someBlank rightVarUnit",
      "rightVarUnit someBlank / someBlank rightVarUnit",
      "mulOrDelExpression someBlank * someBlank rightVarUnit",
      "mulOrDelExpression someBlank / someBlank rightVarUnit",
      "( someBlank rightVar someBlank )"
    ],
    "rightVar": [
      "rightVarUnit",
      "addOrSubExpression",
      "mulOrDelExpression"
    ],
    "varStatement": [
      "varType someBlank leftVar someBlank ;",
      "varType someBlank leftVar someBlank = someBlank rightVar someBlank ;"
    ],
    "varStatementBlockNotEmpty": [
      "varStatement",
      "varStatement someBlank varStatementBlock"
    ],
    "varStatementBlock": [
      "",
      "varStatementBlockNotEmpty"
    ]
  },
  "target": "someBlank varStatementBlockNotEmpty someBlank",
  "keys": [

  ]
}