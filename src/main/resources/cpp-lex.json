{
  "tokens": {
    "number": "0|[1-9]\\d+",
    "someLettersOrNumberOrUnderline": "[\\w\\d]",
    "doubleQuotes": "\"",
    "angleLeftBracket": "<",
    "angleRightBracket": ">",
    "blank": "\\s+",
    "string": "\"[\\s\\d]*\"",
    "include": "#include",
    "symbol": "[_\\w][_\\w\\d]*",
    "comma": ",",
    "leftBracket": "(",
    "rightBracket": ")"
  },
  "productionsTable": {
    "type": [
      "symbol"
    ],
    "leftSymbol": [
      "symbol"
    ],
    "someSymbolJoinByCommaNotEmpty": [
      "symbol",
      "someSymbolJoinByCommaNotEmpty comma symbol"
    ],
    "someSymbolJoinByComma": [
      "",
      "someSymbolJoinByCommaNotEmpty"
    ],
    "functionInvoke": [
      "symbol leftBracket someSymbolJoinByComma rightBracket"
    ],
    "rightVarUnit": [
      "var",
      "number",
      "functionInvoke"
    ],
    "addOrSubExpression": [
      "rightVar someBlank + someBlank rightVarUnit",
      "rightVar someBlank - someBlank rightVarUnit"
    ],
    "mulOrDelExpression": [
      "rightVarUnit someBlank * someBlank rightVarUnit",
      "rightVarUnit someBlank / someBlank rightVarUnit",
      "mulOrDelExpression someBlank * someBlank rightVarUnit",
      "mulOrDelExpression someBlank / someBlank rightVarUnit",
      "( someBlank rightVar someBlank )"
    ],
    "rightVar": [
      "rightVarUnit",
      "addOrSubExpression",
      "mulOrDelExpression"
    ],
    "varStatement": [
      "varType someBlank leftVar someBlank ;",
      "varType someBlank leftVar someBlank = someBlank rightVar someBlank ;"
    ],
    "varStatementBlockNotEmpty": [
      "varStatement",
      "varStatement someBlank varStatementBlock"
    ],
    "varStatementBlock": [
      "",
      "varStatementBlockNotEmpty"
    ],
    "target": [
      "someBlank varStatementBlockNotEmpty someBlank"
    ]
  },
  "target": "target",
  "keys": [
  ]
}