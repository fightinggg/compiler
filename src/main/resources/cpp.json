{
  "tokens": [
    {"number": "0|[123456789]\\d*"},
    {"doubleQuotes": "\""},
    {"angleLeftBracket": "<"},
    {"angleRightBracket": ">"},
    {"blank": "\\s+"},
    {"leftCurlyBracket": "\\{"},
    {"rightCurlyBracket": "\\}"},
    {"string": "\"[\\s\\w\\d]*\""},
    {"include": "#include"},
    {"while": "while"},
    {"if": "if"},
    {"for": "for"},
    {"comma": ","},
    {"leftBracket": "\\("},
    {"rightBracket": "\\)"},
    {"add": "\\+"},
    {"sub": "\\-"},
    {"mul": "\\*"},
    {"div": "/"},
    {"eq": "="},
    {"semicolon": ";"},
    {"symbol": "[_\\w][_\\w\\d]*"}
  ],
  "productionsTable": {
    "type": [
      "symbol"
    ],
    "leftSymbol": [
      "symbol"
    ],
    "someRightSymbolJoinByCommaNotEmpty": [
      "rightSymbol",
      "someRightSymbolJoinByCommaNotEmpty comma rightSymbol"
    ],
    "functionStatement": [
      "type symbol leftBracket rightBracket leftCurlyBracket block rightCurlyBracket",
      "type symbol leftBracket someRightSymbolJoinByCommaNotEmpty rightBracket leftCurlyBracket block rightCurlyBracket"
    ],
    "functionInvoke": [
      "symbol leftBracket someRightSymbolJoinByCommaNotEmpty rightBracket",
      "symbol leftBracket rightBracket"
    ],
    "rightSymbolUnit": [
      "symbol",
      "number",
      "functionInvoke",
      "string"
    ],
    "addOrSubExpression": [
      "rightSymbol add rightSymbolUnit",
      "rightSymbol sub rightSymbolUnit"
    ],
    "mulOrDelExpression": [
      "rightSymbolUnit mul rightSymbolUnit",
      "rightSymbolUnit div rightSymbolUnit",
      "mulOrDelExpression mul rightSymbolUnit",
      "mulOrDelExpression div rightSymbolUnit",
      "leftBracket rightSymbol rightBracket"
    ],
    "rightSymbol": [
      "rightSymbolUnit",
      "addOrSubExpression",
      "mulOrDelExpression"
    ],
    "symbolStatementSentence": [
      "type leftSymbol",
      "type leftSymbol eq rightSymbol"
    ],
    "symbolUpdateSentence": [
      "leftSymbol eq rightSymbol"
    ],
    "sentence": [
      "symbolStatementSentence",
      "symbolUpdateSentence"
    ],
    "ifBlock": [
      "if leftBracket rightSymbol rightBracket sentence semicolon",
      "if leftBracket rightSymbol rightBracket leftCurlyBracket block rightCurlyBracket"
    ],
    "forBlock": [
      "for leftBracket sentence semicolon rightSymbol semicolon sentence rightBracket sentence semicolon",
      "for leftBracket sentence semicolon rightSymbol semicolon sentence rightBracket leftCurlyBracket block rightCurlyBracket"
    ],
    "whileBlock": [
      "while leftBracket rightSymbol rightBracket sentence semicolon",
      "while leftBracket rightSymbol rightBracket leftCurlyBracket block rightCurlyBracket"
    ],
    "blockUnit": [
      "sentence semicolon",
      "ifBlock",
      "forBlock",
      "whileBlock"
    ],
    "block": [
      "blockUnit",
      "block blockUnit"
    ],
    "target": [
      "functionStatement"
    ]
  },
  "target": "target",
  "blankToken": "blank",
  "keys": [
  ],
  "name": "cpp"
}