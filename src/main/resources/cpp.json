{
  "tokens": [
    {"number": "0|[123456789]\\d*"},
    {"doubleQuotes": "\""},
    {"blank": "\\s+"},
    {"leftCurlyBracket": "\\{"},
    {"rightCurlyBracket": "\\}"},
    {"string": "\"[\\s\\w\\d]*\""},
    {"include": "#include"},
    {"while": "while"},
    {"if": "if"},
    {"for": "for"},
    {"return": "return"},
    {"break": "break"},
    {"continue": "continue"},
    {"do": "do"},
    {"goto": "goto"},
    {"else": "else"},
    {"comma": ","},
    {"leftBracket": "\\("},
    {"rightBracket": "\\)"},
    {"add": "\\+"},
    {"sub": "\\-"},
    {"mul": "\\*"},
    {"div": "/"},
    {"mod": "%"},
    {"doubleEq": "=="},
    {"eq": "="},
    {"ne": "!="},
    {"leftShift": "<<"},
    {"rightShift": ">>"},
    {"be": ">="},
    {"le": "<="},
    {"bt": ">"},
    {"lt": "<"},
    {"semicolon": ";"},
    {"symbol": "[_\\w][_\\w\\d]*"}
  ],
  "productionsTable": {
    "type": [
      "symbol"
    ],
    "leftSymbol": [
      "symbol"
    ],
    "someRightSymbolDefineJoinByCommaNotEmpty": [
      "type rightSymbol",
      "someRightSymbolDefineJoinByCommaNotEmpty comma type rightSymbol"
    ],
    "functionStatement": [
      "type symbol leftBracket rightBracket leftCurlyBracket block rightCurlyBracket",
      "type symbol leftBracket someRightSymbolDefineJoinByCommaNotEmpty rightBracket leftCurlyBracket block rightCurlyBracket"
    ],
    "someRightSymbolJoinByCommaNotEmpty": [
      "rightSymbol",
      "someRightSymbolJoinByCommaNotEmpty comma rightSymbol"
    ],
    "functionInvoke": [
      "symbol leftBracket someRightSymbolJoinByCommaNotEmpty rightBracket",
      "symbol leftBracket rightBracket"
    ],
    "rightSymbolUnit": [
      "symbol",
      "number",
      "functionInvoke",
      "string"
    ],
    "mulOrDelOrModOperator": [
      "mul",
      "div",
      "mod"
    ],
    "mulOrDelOrModExpressionSeq": [
      "rightSymbolUnit mulOrDelOrModOperator rightSymbolUnit",
      "mulOrDelOrModExpressionSeq mulOrDelOrModOperator rightSymbolUnit"
    ],
    "addOrSubOperator": [
      "add",
      "sub"
    ],
    "addOrSubUnit": [
      "rightSymbolUnit",
      "mulOrDelOrModExpressionSeq"
    ],
    "addOrSubExpressionSeq": [
      "addOrSubUnit addOrSubOperator addOrSubUnit",
      "addOrSubExpressionSeq addOrSubOperator addOrSubUnit"
    ],
    "shiftOperator": [
      "leftShift",
      "rightShift"
    ],
    "shiftSeq": [
      "rightSymbolUnit shiftOperator rightSymbolUnit",
      "mulOrDelOrModExpressionSeq shiftOperator rightSymbolUnit",
      "addOrSubExpressionSeq shiftOperator rightSymbolUnit",
      "shiftSeq shiftOperator rightSymbolUnit"
    ],
    "btLtBeLeComparterOperator": [
      "bt",
      "lt",
      "be",
      "le"
    ],
    "btLtBeLeSeq": [
      "rightSymbolUnit btLtBeLeComparterOperator rightSymbolUnit",
      "mulOrDelOrModExpressionSeq btLtBeLeComparterOperator rightSymbolUnit",
      "addOrSubExpressionSeq btLtBeLeComparterOperator rightSymbolUnit",
      "shiftSeq btLtBeLeComparterOperator rightSymbolUnit",
      "btLtBeLeSeq btLtBeLeComparterOperator rightSymbolUnit"
    ],
    "eqOrneOperator": [
      "doubleEq",
      "ne"
    ],
    "eqOrneSeq": [
      "rightSymbolUnit eqOrneOperator rightSymbolUnit",
      "mulOrDelOrModExpressionSeq eqOrneOperator rightSymbolUnit",
      "addOrSubExpressionSeq eqOrneOperator rightSymbolUnit",
      "shiftSeq eqOrneOperator rightSymbolUnit",
      "btLtBeLeSeq eqOrneOperator rightSymbolUnit",
      "eqOrneSeq eqOrneOperator rightSymbolUnit"
    ],
    "rightSymbol": [
      "rightSymbolUnit",
      "mulOrDelOrModExpressionSeq",
      "addOrSubExpressionSeq",
      "shiftSeq",
      "btLtBeLeSeq",
      "eqOrneSeq"
    ],
    "symbolStatementSentence": [
      "type leftSymbol",
      "type leftSymbol eq rightSymbol"
    ],
    "symbolUpdateSentence": [
      "leftSymbol eq rightSymbol"
    ],
    "returnSentence": [
      "return rightSymbol",
      "return"
    ],
    "gotoSentence": [
      "goto symbol"
    ],
    "sentence": [
      "symbolStatementSentence",
      "symbolUpdateSentence",
      "returnSentence",
      "gotoSentence",
      "break",
      "continue"
    ],
    "ifElseBlock": [
      "if leftBracket rightSymbol rightBracket notHalfIfBlockUnit else blockUnit"
    ],
    "ifBlock": [
      "if leftBracket rightSymbol rightBracket blockUnit",
      "if leftBracket rightSymbol rightBracket notHalfIfBlockUnit else blockUnit"
    ],
    "forBlock": [
      "for leftBracket sentence semicolon rightSymbol semicolon sentence rightBracket blockUnit",
    ],
    "whileBlock": [
      "while leftBracket rightSymbol rightBracket blockUnit",
    ],
    "doWhileBlock": [
      "do blockUnit while rightSymbol"
    ],
    "notHalfIfBlockUnit": [
      "sentence semicolon",
      "ifElseBlock",
      "forBlock",
      "whileBlock",
      "leftCurlyBracket block rightCurlyBracket"
    ],
    "blockUnit": [
      "sentence semicolon",
      "ifBlock",
      "forBlock",
      "whileBlock",
      "leftCurlyBracket block rightCurlyBracket"
    ],
    "block": [
      "blockUnit",
      "block blockUnit"
    ],
    "staticSymbolStatement": [
      "type leftSymbol semicolon",
      "type leftSymbol eq rightSymbol semicolon"
    ],
    "cFileUnit": [
      "staticSymbolStatement",
      "functionStatement"
    ],
    "someCFileUnit": [
      "cFileUnit",
      "someCFileUnit cFileUnit"
    ],
    "target": [
      "someCFileUnit"
    ]
  },
  "target": "target",
  "blankToken": "blank",
  "keys": [
  ],
  "name": "cpp"
}